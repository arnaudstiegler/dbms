package edu.polytechnique.inf553;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebInitParam;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.text.StringEscapeUtils;

/**
 * Given the name of an artist and a time range (i.e.,two dates), find all the
 * releases in this range where he/she was the main contributor. Return the id
 * and the name of the release, sorted by the release date in ascending order.
 * (Do not consider incomplete dates.)
 */
@WebServlet(urlPatterns = { "/Q4" }, initParams = {
		@WebInitParam(name = "name", value = "", description = "The name of an artist"),
		@WebInitParam(name = "startDate", value = "", description = "The start date of a release"),
		@WebInitParam(name = "endDate", value = "", description = "The end date of a release") })
public final class Q4Servlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public Q4Servlet() {
		super();
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		Connection connection = null;
		try {
			Class.forName("org.postgresql.Driver");
			String host = "localhost";
			String dbName = "arnaudstiegler";
			int port = 5432;
			String serverURL = "jdbc:postgresql://" + host + ":" + port + "/" + dbName;
			String userName = "arnaudstiegler";
			String password = "mypass";
			connection = DriverManager.getConnection(serverURL, userName, password);

			DatabaseMetaData dmd = connection.getMetaData();
			String serverName = dmd.getDatabaseProductName();
			String productVersion = dmd.getDatabaseProductVersion();

			String name = "David Guetta";
			String begin = "2000-01-01";
			String end = "2010-10-12";

			String delims = "[-]";
			String[] tokens = begin.split(delims);
			int ybegin = Integer.parseInt(tokens[0]);
			int mbegin = Integer.parseInt(tokens[1]);
			int dbegin = Integer.parseInt(tokens[2]);

			String[] tokensPrime = begin.split(delims);
			int yend = Integer.parseInt(tokensPrime[0]);
			int mend = Integer.parseInt(tokensPrime[1]);
			int dend = Integer.parseInt(tokensPrime[2]);

			// STEP 4: Execute a query
			System.out.println("Creating statement...");
			Statement stmt = connection.createStatement();
			String sql;
			sql = "SELECT release.id,release.title FROM ((artist INNER JOIN release_has_artist r ON artist.id = r.artist) INNER JOIN release_country ON release_country.release = r.release) INNER JOIN release ON release.id=r.release "
					+ "WHERE (release_country.year>" + ybegin + ") OR  (release_country.year<" + mend + ")"
					+ " OR (release_country.year=" + ybegin + " AND release_country.month>" + mbegin + ")"
					+ " OR (release_country.year=" + ybegin + " AND release_country.month=" + mbegin
					+ "AND release_country.day>=" + dbegin + ")" + " OR (release_country.year=" + yend
					+ " AND release_country.month<" + mend + ")" + " OR (release_country.year=" + yend
					+ " AND release_country.month=" + mend + "AND release_country.day<=" + dend + ")"
					+ " AND artist.name='" + name + "' ";
					//+ " ORDER BY release_country.year, release_country.month, release_country.day ASC;";

			ResultSet rs = stmt.executeQuery(sql);
			response.setContentType("text/xml;charset=UTF-8");
			PrintWriter writer = response.getWriter();
			writer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			writer.append("<result>");
			// STEP 5: Extract data from result set
			while (rs.next()) {
				// Retrieve by column name
				int id = rs.getInt("id");
				String title = rs.getString("title");
				// Display values
				writer.append("<row>");
				writer.append("<id>");
				writer.append(StringEscapeUtils.escapeXml11(Integer.toString(id)));
				writer.append("</id>");
				writer.append("<title>");
				writer.append(StringEscapeUtils.escapeXml11(title));
				writer.append("</title>");
				writer.append("</row>");

			}
			response.getWriter().append("</result>");
		} catch (ClassNotFoundException e) {
			System.out.println("Driver not found!");
		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (connection != null)
					connection.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}
		}
	}

}
